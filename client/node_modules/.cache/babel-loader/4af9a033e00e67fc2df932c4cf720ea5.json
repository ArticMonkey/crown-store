{"ast":null,"code":"import _defineProperty from\"E:\\\\4 - Training\\\\React-Playground\\\\React 2020\\\\crown-store\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"E:\\\\4 - Training\\\\React-Playground\\\\React 2020\\\\crown-store\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"E:\\\\4 - Training\\\\React-Playground\\\\React 2020\\\\crown-store\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _slicedToArray from\"E:\\\\4 - Training\\\\React-Playground\\\\React 2020\\\\crown-store\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{connect}from'react-redux';import FormInput from'../form-input/form-input.component';import CustomButton from'../custom-button/custom-button.component';import{signUpStart as _signUpStart}from'../../redux/user/user.actions';import{SignUpContainer,SignUpTitle}from'./sign-up.styles';var SignUp=function SignUp(_ref){var signUpStart=_ref.signUpStart;var _useState=useState({displayName:'',email:'',password:'',confirmPassword:''}),_useState2=_slicedToArray(_useState,2),userCredentials=_useState2[0],setUserCredentials=_useState2[1];var displayName=userCredentials.displayName,email=userCredentials.email,password=userCredentials.password,confirmPassword=userCredentials.confirmPassword;var handleSubmit=function handleSubmit(event){return _regeneratorRuntime.async(function handleSubmit$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();if(!(password!==confirmPassword)){_context.next=4;break;}alert(\"passwords don't match\");return _context.abrupt(\"return\");case 4:signUpStart({displayName:displayName,email:email,password:password});case 5:case\"end\":return _context.stop();}}});};var handleChange=function handleChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setUserCredentials(_objectSpread({},userCredentials,_defineProperty({},name,value)));};return React.createElement(SignUpContainer,null,React.createElement(SignUpTitle,null,\"I do not have a account\"),React.createElement(\"span\",null,\"Sign up with your email and password\"),React.createElement(\"form\",{className:\"sign-up-form\",onSubmit:handleSubmit},React.createElement(FormInput,{type:\"text\",name:\"displayName\",value:displayName,onChange:handleChange,label:\"Display Name\",required:true}),React.createElement(FormInput,{type:\"email\",name:\"email\",value:email,onChange:handleChange,label:\"Email\",required:true}),React.createElement(FormInput,{type:\"password\",name:\"password\",value:password,onChange:handleChange,label:\"Password\",required:true}),React.createElement(FormInput,{type:\"password\",name:\"confirmPassword\",value:confirmPassword,onChange:handleChange,label:\"Confirm Password\",required:true}),React.createElement(CustomButton,{type:\"submit\"},\"SIGN UP\")));};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{signUpStart:function signUpStart(userCredentials){return dispatch(_signUpStart(userCredentials));}};};export default connect(null,mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["E:/4 - Training/React-Playground/React 2020/crown-store/client/src/components/sign-up/sign-up.component.jsx"],"names":["React","useState","connect","FormInput","CustomButton","signUpStart","SignUpContainer","SignUpTitle","SignUp","displayName","email","password","confirmPassword","userCredentials","setUserCredentials","handleSubmit","event","preventDefault","alert","handleChange","target","name","value","mapDispatchToProps","dispatch"],"mappings":"4lBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,oCAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,0CAAzB,CAEA,OAASC,WAAW,GAAXA,CAAAA,YAAT,KAA4B,+BAA5B,CAEA,OAASC,eAAT,CAA0BC,WAA1B,KAA6C,kBAA7C,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAqB,IAAlBH,CAAAA,WAAkB,MAAlBA,WAAkB,eACYJ,QAAQ,CAAC,CACrDQ,WAAW,CAAE,EADwC,CAErDC,KAAK,CAAE,EAF8C,CAGrDC,QAAQ,CAAE,EAH2C,CAIrDC,eAAe,CAAE,EAJoC,CAAD,CADpB,wCAC3BC,eAD2B,eACVC,kBADU,kBAQ1BL,CAAAA,WAR0B,CAQwBI,eARxB,CAQ1BJ,WAR0B,CAQbC,KARa,CAQwBG,eARxB,CAQbH,KARa,CAQNC,QARM,CAQwBE,eARxB,CAQNF,QARM,CAQIC,eARJ,CAQwBC,eARxB,CAQID,eARJ,CAUlC,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAMC,KAAN,wHACnBA,KAAK,CAACC,cAAN,GADmB,KAGfN,QAAQ,GAAKC,eAHE,0BAIjBM,KAAK,CAAC,uBAAD,CAAL,CAJiB,wCAQnBb,WAAW,CAAC,CAAEI,WAAW,CAAXA,WAAF,CAAeC,KAAK,CAALA,KAAf,CAAsBC,QAAQ,CAARA,QAAtB,CAAD,CAAX,CARmB,8CAArB,CAWA,GAAMQ,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAH,KAAK,CAAI,mBACJA,KAAK,CAACI,MADF,CACpBC,IADoB,eACpBA,IADoB,CACdC,KADc,eACdA,KADc,CAG5BR,kBAAkB,kBAAMD,eAAN,oBAAwBQ,IAAxB,CAA+BC,KAA/B,GAAlB,CACD,CAJD,CAMA,MACI,qBAAC,eAAD,MACE,oBAAC,WAAD,gCADF,CAEE,uEAFF,CAGE,4BAAM,SAAS,CAAC,cAAhB,CAA+B,QAAQ,CAAEP,YAAzC,EACE,oBAAC,SAAD,EACI,IAAI,CAAC,MADT,CAEI,IAAI,CAAC,aAFT,CAGI,KAAK,CAAEN,WAHX,CAII,QAAQ,CAAEU,YAJd,CAKI,KAAK,CAAC,cALV,CAMI,QAAQ,KANZ,EADF,CASE,oBAAC,SAAD,EACI,IAAI,CAAC,OADT,CAEI,IAAI,CAAC,OAFT,CAGI,KAAK,CAAET,KAHX,CAII,QAAQ,CAAES,YAJd,CAKI,KAAK,CAAC,OALV,CAMI,QAAQ,KANZ,EATF,CAiBE,oBAAC,SAAD,EACI,IAAI,CAAC,UADT,CAEI,IAAI,CAAC,UAFT,CAGI,KAAK,CAAER,QAHX,CAII,QAAQ,CAAEQ,YAJd,CAKI,KAAK,CAAC,UALV,CAMI,QAAQ,KANZ,EAjBF,CAyBE,oBAAC,SAAD,EACI,IAAI,CAAC,UADT,CAEI,IAAI,CAAC,iBAFT,CAGI,KAAK,CAAEP,eAHX,CAII,QAAQ,CAAEO,YAJd,CAKI,KAAK,CAAC,kBALV,CAMI,QAAQ,KANZ,EAzBF,CAiCE,oBAAC,YAAD,EAAc,IAAI,CAAC,QAAnB,YAjCF,CAHF,CADJ,CAyCD,CApED,CAsEA,GAAMI,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACtCnB,WAAW,CAAE,qBAAAQ,eAAe,QAAIW,CAAAA,QAAQ,CAACnB,YAAW,CAACQ,eAAD,CAAZ,CAAZ,EADU,CAAL,EAAnC,CAIA,cAAeX,CAAAA,OAAO,CAAC,IAAD,CAAOqB,kBAAP,CAAP,CAAkCf,MAAlC,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\n\nimport { signUpStart } from '../../redux/user/user.actions';\n\nimport { SignUpContainer, SignUpTitle } from './sign-up.styles';\n\nconst SignUp = ({ signUpStart }) => {\n  const [userCredentials, setUserCredentials] = useState({\n    displayName: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n\n  const { displayName, email, password, confirmPassword } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"passwords don't match\");\n      return;\n    }\n\n    signUpStart({ displayName, email, password });\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    setUserCredentials({ ...userCredentials, [name]: value });\n  };\n\n  return (\n      <SignUpContainer>\n        <SignUpTitle>I do not have a account</SignUpTitle>\n        <span>Sign up with your email and password</span>\n        <form className='sign-up-form' onSubmit={handleSubmit}>\n          <FormInput\n              type='text'\n              name='displayName'\n              value={displayName}\n              onChange={handleChange}\n              label='Display Name'\n              required\n          />\n          <FormInput\n              type='email'\n              name='email'\n              value={email}\n              onChange={handleChange}\n              label='Email'\n              required\n          />\n          <FormInput\n              type='password'\n              name='password'\n              value={password}\n              onChange={handleChange}\n              label='Password'\n              required\n          />\n          <FormInput\n              type='password'\n              name='confirmPassword'\n              value={confirmPassword}\n              onChange={handleChange}\n              label='Confirm Password'\n              required\n          />\n          <CustomButton type='submit'>SIGN UP</CustomButton>\n        </form>\n      </SignUpContainer>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: userCredentials => dispatch(signUpStart(userCredentials))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);\n"]},"metadata":{},"sourceType":"module"}